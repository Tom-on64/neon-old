(* Current Neon Syntax *)

program = statement*; (* Root Node*)

(* Nodes *)
statement = return | declaration | assignment | scope | if | while| functionCall;
declaration = type ident ("=" expr)|("(" (param ("," param)*)? ")" scope);
param = type ident;
assignment = (ident ("="|"+="|"-=") expr)|(ident("++"|"--"));
return = "return" expr;
scope = ("{" statement* "}");
if = "if" "(" expr ")" (scope|statement) ("else" (scope|statement))?;
while = "while" "(" expr ")" (scope|statement);
functionCall = ident "(" (expr ("," expr)*)? ")";

expr = term | binExpressions | functionCall;
term = intLit | ident | "(" expr ")";
binExpression = (expr "*" expr) | (expr "/" expr) | (expr "+" expr) | (expr "-" expr);

(* IToken *)
ident = [A-Za-z_][A-Za-z0-9_]*;
type = ?type?;
intLit = ?LInt?;
